# -*- coding: utf-8 -*-
"""Copy of Math 24 Lab 7 Lab Convolution and PDE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uho5KKvEgT4Xumvb7CoiyKyxn8dcvd39

Never Say Never - Documentary on Belousovâ€“Zhabotinsky Reaction BZ

https://www.youtube.com/watch?v=FvXwVZPOoBI


Image Kernels Explained Visually

https://setosa.io/ev/image-kernels/
"""

import numpy as np
from skimage import io as io
import matplotlib.pyplot as plt
from scipy import signal
import torch.nn.functional as F
from torch.nn.functional import *
import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
import time
from matplotlib import animation, rc
from IPython.display import HTML
rc('animation', html='html5')

def make_ani(A, colormap='gray'): #function used to create an animation

    fig, ax = plt.subplots() #create the figure and the axis
    im = ax.imshow(A[0,:,:], cmap = colormap); #takes the first frame of an image "A" and shows it on the axis with the inputted color way and assigns it as the variable "im"
    ax.axis('off')
    fig.set_size_inches(12, 12)

    def animate(data, im):
        im.set_data(data) #updates the set data of the image plot with the inputted "data"

    def step():
        for i in range(A.shape[0]): #change the first index of A, the frame, for every frame in the data set
            data = A[i,:,:]
            yield data

    return animation.FuncAnimation(fig, animate, step, interval=100, repeat=True, fargs=(im,)) #.1 s delay between frames

def plot(x):
    fig, ax = plt.subplots()
    im = ax.imshow(x, cmap = 'gray') #regular image show function
    ax.axis('off')
    fig.set_size_inches(15, 15)
    plt.show()

image = io.imread("https://www.filfre.net/wp-content/uploads/2013/12/bbc4.png")

image.shape #RGBa #shape of the image (data)

plot(image)

image.shape

plot(image[:,:,0]) #just the red parts

plot(image[:,:,1]) #jsut the green

plot(image[:,:,2]) #just the blue

image.shape

image = np.mean(image, axis=2) #take the mean of all the rbg values

plot(image)

image.shape

a = np.matrix([[1,2,1],[0,0,0],[-1,-2,-1]])

a

plot(a)

image.shape

y = signal.convolve2d(image, a, mode='same') #performs a 2d convultion of an image with a kernal represented by the array "a"
#same means the output will have the same shape as the input

plot(y)

a = np.transpose(a) #flips the data on its diagonal, colums becomes rows, and vice versa

a

plot(a)

y = signal.convolve2d(image, a, mode='same') #convolves the image plus the image "a" into one image

plot(y)

b = np.random.random((25,25)) #generates a random 25x25 array





y = signal.convolve2d(image, b)# convolves the image with the generated array "b"

plot(y)

x = io.imread("https://ichef.bbci.co.uk/news/660/cpsprodpb/C342/production/_88068994_thinkstockphotos-493881770.jpg")
x = x[:,:,0] #reads an image from a websitre and extracts the red channel from it

x = x.astype(float) #assins the values in x to be floating point numbers   (whole numbers)

x

x = x / 255.0 #normalize the values
plot(x)

x #x as ratios between 0-1 for the red channel of the image

a

a[1,1] #center of a

def conv2(x,f): #performs a 2d convolution on an input matrix x with a filter/kernal f
    x2 = np.zeros(x.shape) #make an array of zeros in the shape of x
    for i in range(1,x.shape[0]-1):
        for j in range(1,x.shape[1]-1):

            x2[i,j] = f[0,0] * x[i-1,j-1]  \
            +         f[0,1] * x[i-1,j]    \
            +         f[0,2] * x[i-1,j+1]  \
            +         f[1,0] * x[i,j-1]    \
            +         f[1,1] * x[i,j]      \
            +         f[1,2] * x[i,j+1]    \
            +         f[2,0] * x[i+1,j-1]  \
            +         f[2,1] * x[i+1,j]    \
            +         f[2,2] * x[i+1,j+1]
 #for each i and j coordinate, apply the filter f to each 3x3 grid around each coordinate
    return x2

a = np.matrix([[-1,-1,-1],[-1,8,-1],[-1,-1,-1]])
# a = np.matrix([[1,2,1],[0,0,0],[-1,-2,-1]])
# a = np.matrix([[1,1,1],[1,1,1],[1,1,1]])
# a = 5*np.random.random((3,3))-5*np.random.random((3,3))

a

z = conv2(x,a) #convolve the image x around the kernal 'a'

plot(z)

for i in range(10):
    a = 2*np.random.random((3,3))-1 #create 10 different random 3x3 filters and convolve x with each of them
    print(a)
    z=conv2(x,a)
    plot(z)



#Homemade Conv Loop Timing
a = 2*np.random.random((9,3,3))-1
start_time = time.time()
for i in range(9):

    z=conv2(x,a[i,:,:]) #brute force convolve function takes more time

print("Seconds:", (time.time() - start_time))

#Optimized Code Timing
a = 2*np.random.random((9,3,3))-1
start_time = time.time()
for i in range(9):

    z = signal.convolve2d(x,a[i,:,:]) #built in convolve function takes almost no time

print("--- %s seconds ---" % (time.time() - start_time))

#GPU Processing Timing, No Loop, 96 filters!!
a2 = 2*np.random.random((96,1,3,3))-1
x2 = torch.tensor(x).cuda()
a2 = torch.tensor(a2).cuda() #does 96 filters in less than 1 second
x2 = x2[None,None,:,:]

start_time = time.time()
z = conv2d(x2,a2)
print("--- %s seconds ---" % (time.time() - start_time))

z.shape



image = io.imread("https://img.jagranjosh.com/imported/images/E/Articles/Fastest-Fish-img.jpg").astype(float)/255.0
plot(image)

image.shape

plot(np.random.random((11,11,3)))

image = np.transpose(image, (2, 0, 1)) #rearranges the shape of the image, it went from height, width, channels, to channel, height, width

image.shape #new shape of the image after transposing

f = np.random.random((1,3,11,11)) #generates a 4d array with random values. 1kernalx3channelsx11heightx11width

image.shape

image = image[None,:,:,:] #adds a new axis to the beginning of the array

image.shape,f.shape #shape of both of the arrays

f =  torch.tensor(f)
image =  torch.tensor(image) #convert both arrays to tensors

image2 = F.conv2d(image,f) #convolves the image with the f kernal

image2 = image2.numpy()#converts the tensor back to numpy array

image2.shape



image2[0,0,:,:].shape

plot(image2[0,0,:,:]) #plot the image with the applied filter



image = io.imread("http://ian-albert.com/games/super_mario_bros_maps/mario-2-2.gif")
image = image[:,0:700,:]
plot(image)

coin = image[185:200,224:239,:] #isolate the coin on the image

plot(coin)

image = image[60:,0:700,:]
plot(image)

def scale1(x):
    return (x-np.min(x))/(np.max(x)-np.min(x)) #normalizes the values in x from 0 as the lowest to 1 as the highest, then sclaes all the values between these two

image = np.mean(image,axis=2) #takes the mean of the 3rd axis of the image, effectively making it a 2d array
coin = np.mean(coin,axis=2) #does the same to the coin image

image = scale1(image)
coin = scale1(coin)

plot(image)
plot(coin)

coin.shape

image = image - np.mean(image) #subtracts each value from the mean, centering the data around zero
coin = coin - np.mean(coin)

image.shape,coin.shape

coin = np.rot90(coin, 2) #rotates the array 90 degrees twice (180 total)

plot(coin) #upside down version of the coin

z = signal.convolve2d(image,coin) #convolve the image with the coin

# z = conv2(image,coin)

plot(z)

z == np.max(z)

plot(z==np.max(z)) #shows where it thinks the coin is based on the convolution

np.where(z == np.amax(z)) #teslls us coordinates for where the coin is

[y,x] = np.where(z == np.amax(z))

plt.plot(x,-y,'.') #plots the x and y values of where it thinks our coin is

fig, ax = plt.subplots()
im = ax.imshow(image, cmap = 'gray')
ax.axis('off')
ax.scatter(x-6, y-6, c='red', s=40)
fig.set_size_inches(18, 10) #plots a red dot from the coordinate plane to the image, showing us where it thinks the coins are







def conv2(w,f): #GPU conv with padding

    n = conv2d(w.type(torch.int),f.type(torch.int))
    n = pad(n, (1, 1, 1, 1)) #add ones to the sides of the matrix

    return n

#Game of Life

w = (np.random.random((100,100)) > 0.5) #game of life world grid w
f = np.matrix([[1,1,1],[1,0,1],[1,1,1]])

f

plot(w)

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.tensor(w.astype(int))[None,None,:,:]
f = torch.tensor(f.astype(int))[None,None,:,:]

# %%timeit
n = conv2(w,f)

# (n==2)[0,0,:,:].shape

plot((n==2)[0,0,:,:])

for i in range(steps):

    n = conv2(w,f) #convolves each cell with the filter f

    w = (w * (n==2)) + (n==3) #the rules of the game state that each cell with 2 live neigbors stays, so w is multiplied by this, it also states that any cell
    #with 3 or more live neighbors that is dead will revive, adding the n==3

    A[i] = w #stores of all these in a matrix A

make_ani(A)







#Surface Tension Model

w = (np.random.random((100,100)) > 0.5).astype(int)
f = np.matrix([[1,1,1],[1,1,1],[1,1,1]])

steps = 200
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.tensor(w)[None,None,:,:]
f = torch.tensor(f)[None,None,:,:]

for i in range(steps):

    n = conv2(w,f)

    w = ~((n<4) + (n==5)) #~inverts the results so true is live and false is dead. only cells with less than 4 neighbors or exactly 5 neihbors live

    A[i] = w

make_ani(A)



#Forest Fire Model

# veg = {empty=0 burning=1 green=2}

Plightning = 0.00005
Pgrowth = 0.01

w = (np.random.random((100,100)) > 0.5).astype(int)
f = np.matrix([[1,1,1],[1,0,1],[1,1,1]])

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.tensor(w)[None,None,:,:]
f = torch.tensor(f)[None,None,:,:]

for i in range(steps):

    n = w == 1

    n = conv2(n,f)

    w =  2*((w == 2)).type(torch.int)                                                \
    -    1*((w == 2) * ( n > 0 ) ).type(torch.int)                                   \
    -    1*((w == 2) * ( np.random.random((100,100)) < Plightning)).type(torch.int)  \ #adds random chances for cells to be killed or brought back based on neighbor conditionds
    +    2*((w == 0) * ( np.random.random((100,100)) < Pgrowth)).type(torch.int)

    A[i] = w

make_ani(A, colormap='magma')





#Nonlinear Waves

w = np.random.random((100,100)) < 0.1
f = np.matrix([[1,1,1],[1,0,1],[1,1,1]])

t  = 6  #center value=6; 7 makes fast pattern; 5 analiating waves
t1 = 3  #center value=3

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.from_numpy(w)[None,None,:,:]
f = torch.from_numpy(f)[None,None,:,:]

for i in range(1000):

    n = (w>0)&(w<t)

    n = conv2(n,f)

    w = ((w==0) & (n>=t1)) \
    +  2*(w==1)            \
    +  3*(w==2)            \
    +  4*(w==3)            \
    +  5*(w==4)            \
    +  6*(w==5)            \
    +  7*(w==6)            \ #uses the rules of the game of life to create a spiral wave pattern eminating from the origin
    +  8*(w==7)            \
    +  9*(w==8)            \
    +  0*(w==9)            \ #cells with 9 neighbors die

    A[i] = w

make_ani(A)





#Wireword Wire
#{empty=0 electron_head=1 electron_tail=2, wire=3}

w = np.zeros((100,100))
w[50,:] = 3
w[50,5] = 2
w[50,6] = 1

f = np.matrix([[1,1,1],[1,0,1],[1,1,1]])

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.from_numpy(w)[None,None,:,:]
f = torch.from_numpy(f)[None,None,:,:]

for i in range(100):

    n=w==1

    n = conv2(n,f)

    w = 1*((w==3)& ((n==1) | (n==2)))                 \
    +   3*((w==3)& ((n!=1) & (n!=2)))                 \
    +   0*(w==0)                    \
    +   2*(w==1)                    \
    +   3*(w==2)                    \ #uses the game of life rules to create a linear line that goes across the screen

    A[i] = w

make_ani(A, colormap='magma')



#Wireworld Oscillator

w = np.zeros((100,100))
w[50,15:-1] = 3
w[48,5:15] = 3
w[52,5:15] = 3 #initlialize the starting points on the image
w[49:52,4] = 3
w[49:52,15] = 3
w[52,14] = 1
w[52,13] = 2

f = np.matrix([[1,1,1],[1,0,1],[1,1,1]]) #initalize the kernal

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.from_numpy(w)[None,None,:,:]
f = torch.from_numpy(f)[None,None,:,:]

for i in range(steps):

    n = w == 1

    n = conv2(n,f)

    w = 0*((w==0))                                    \
    +   2*((w==1))                                    \
    +   3*((w==2))                                    \
    +   3*((w==3)& ((n!=1) & (n!=2)))                 \
    +   1*((w==3)& ((n==1) | (n==2)))                 \

    A[i] = w

make_ani(A, colormap='magma')





#FitzHugh-Nagumo Reaction Diffusion

def laplacian(U):
    n = conv2d(U,laplace)
    n = pad(n, (1, 1, 1, 1),'circular')
    return n

laplace = 0.5*np.array([[0.5, 1.0, 0.5],
                        [1.0, -6., 1.0],
                        [0.5, 1.0, 0.5]])

N = 256
h = 0.05

A = np.zeros([N, N], dtype=np.float32)

A = A + -0.7

noise_shape = A[:,120:130].shape

A[:,120:130] = (np.random.normal(0.9,0.05,size=noise_shape))

B = np.zeros([N, N], dtype=np.float32)

B = B + -0.3

w1 = plot(A)

a0 = -0.1
a1 = 2
epsilon = 0.05
delta = 4
k1 = 1
k2 = 0
k3 = 1

A = torch.from_numpy(A)[None,None,:,:].cuda() #says i need an nvidia driver to run this
B = torch.from_numpy(B)[None,None,:,:].cuda()
laplace = torch.from_numpy(laplace)[None,None,:,:].type(torch.float).cuda()

steps = 100
P = torch.zeros((steps,N,N)) # storage for frames for animation

j = 0
for i in range(steps*1000):

    A += h*( k1*A - k2*A**2 - A**3 - B + laplacian(A))
    B += h*( epsilon*(k3*A - a1*B -a0) + delta*laplacian(B) )

    if i % 1000 == 0:
        P[j] = A
        j += 1

make_ani(P)



#Gray Scott Reaction Diffusion

laplace = 0.5*np.array([[0.5, 1.0, 0.5],
                        [1.0, -6., 1.0],
                        [0.5, 1.0, 0.5]])

laplace = torch.from_numpy(laplace)[None,None,:,:].type(torch.float).cuda()

def laplacian(U):
    n = conv2d(U,laplace)
    n = pad(n, (1,1,1,1))
    n = pad(n, (0,0,0,0))
    return n

(Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.065)) # Bacteria 1
# (Du, Dv, F, k) = ((0.14, 0.06, 0.035, 0.065)) # Bacteria 2
# (Du, Dv, F, k) = ((0.16, 0.08, 0.060, 0.062)) # Coral
# (Du, Dv, F, k) = ((0.19, 0.05, 0.060, 0.062)) # Fingerprint
# (Du, Dv, F, k) = ((0.10, 0.10, 0.018, 0.050)) # Spirals
# (Du, Dv, F, k) = ((0.12, 0.08, 0.020, 0.050)) # Spirals Dense
# (Du, Dv, F, k) = ((0.10, 0.16, 0.020, 0.050)) # Spirals Fast
# (Du, Dv, F, k) = ((0.16, 0.08, 0.020, 0.055)) # Unstable
# (Du, Dv, F, k) = ((0.16, 0.08, 0.050, 0.065)) # Worms 1
# (Du, Dv, F, k) = ((0.16, 0.08, 0.054, 0.063)) # Worms 2
# (Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.060)) # Zebrafish

N = 256

U = np.zeros((N,N)) # Clear Chemicals
V = np.zeros((N,N))

U = U + 1.0
r = 5
U[N//2-r:N//2+r,N//2-r:N//2+r] = 0.50 # Add Disturbance in Center Square Radius r
V[N//2-r:N//2+r,N//2-r:N//2+r] = 0.25

U += 0.05*np.random.random((N,N)) # Add Noise to Chemicals
V += 0.05*np.random.random((N,N))

U = torch.from_numpy(U)[None,None,:,:].type(torch.float).cuda()
V = torch.from_numpy(V)[None,None,:,:].type(torch.float).cuda()

steps = 2000
skip = 100
P = torch.zeros((steps,N,N)) # storage for frames for animation

j = 0
for i in range(steps*skip):

    U += ( Du*laplacian(U) - U*V**2 +  F   *(1-U) )
    V += ( Dv*laplacian(V) + U*V**2 - (F+k)*V     )

    if i % skip == 0:
        P[j] = U
        j += 1

make_ani(P)











# (Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.065)) # Bacteria 1
# (Du, Dv, F, k) = ((0.14, 0.06, 0.035, 0.065)) # Bacteria 2
# (Du, Dv, F, k) = ((0.16, 0.08, 0.060, 0.062)) # Coral
# (Du, Dv, F, k) = ((0.19, 0.05, 0.060, 0.062)) # Fingerprint
# (Du, Dv, F, k) = ((0.10, 0.10, 0.018, 0.050)) # Spirals
# (Du, Dv, F, k) = ((0.12, 0.08, 0.020, 0.050)) # Spirals Dense
# (Du, Dv, F, k) = ((0.10, 0.16, 0.020, 0.050)) # Spirals Fast
# (Du, Dv, F, k) = ((0.16, 0.08, 0.020, 0.055)) # Unstable
# (Du, Dv, F, k) = ((0.16, 0.08, 0.050, 0.065)) # Worms 1
# (Du, Dv, F, k) = ((0.16, 0.08, 0.054, 0.063)) # Worms 2
(Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.060)) # Zebrafish

N = 256

U = np.zeros((N,N)) # Clear Chemicals
V = np.zeros((N,N))

U = U + 1.0
r = 5
U[N//2-r:N//2+r,N//2-r:N//2+r] = 0.50 # Add Disturbance in Center Square Radius r
V[N//2-r:N//2+r,N//2-r:N//2+r] = 0.25

U += 0.05*np.random.random((N,N)) # Add Noise to Chemicals
V += 0.05*np.random.random((N,N))

U = torch.from_numpy(U)[None,None,:,:].type(torch.float).cuda()
V = torch.from_numpy(V)[None,None,:,:].type(torch.float).cuda()

steps = 2000
skip = 100
P = torch.zeros((steps,N,N)) # storage for frames for animation

j = 0
for i in range(steps*skip):

    U += ( Du*laplacian(U) - U*V**2 +  F   *(1-U) )
    V += ( Dv*laplacian(V) + U*V**2 - (F+k)*V     )

    if i % skip == 0:
        P[j] = U
        j += 1

make_ani(P)









# (Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.065)) # Bacteria 1
# (Du, Dv, F, k) = ((0.14, 0.06, 0.035, 0.065)) # Bacteria 2
(Du, Dv, F, k) = ((0.16, 0.08, 0.060, 0.062)) # Coral
# (Du, Dv, F, k) = ((0.19, 0.05, 0.060, 0.062)) # Fingerprint
# (Du, Dv, F, k) = ((0.10, 0.10, 0.018, 0.050)) # Spirals
# (Du, Dv, F, k) = ((0.12, 0.08, 0.020, 0.050)) # Spirals Dense
# (Du, Dv, F, k) = ((0.10, 0.16, 0.020, 0.050)) # Spirals Fast
# (Du, Dv, F, k) = ((0.16, 0.08, 0.020, 0.055)) # Unstable
# (Du, Dv, F, k) = ((0.16, 0.08, 0.050, 0.065)) # Worms 1
# (Du, Dv, F, k) = ((0.16, 0.08, 0.054, 0.063)) # Worms 2
# (Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.060)) # Zebrafish

N = 256

U = np.zeros((N,N)) # Clear Chemicals
V = np.zeros((N,N))

U = U + 1.0
r = 5
U[N//2-r:N//2+r,N//2-r:N//2+r] = 0.50 # Add Disturbance in Center Square Radius r
V[N//2-r:N//2+r,N//2-r:N//2+r] = 0.25

U += 0.05*np.random.random((N,N)) # Add Noise to Chemicals
V += 0.05*np.random.random((N,N))

U = torch.from_numpy(U)[None,None,:,:].type(torch.float).cuda()
V = torch.from_numpy(V)[None,None,:,:].type(torch.float).cuda()

steps = 8000
skip = 100
P = torch.zeros((steps,N,N)) # storage for frames for animation

j = 0
for i in range(steps*skip):

    U += ( Du*laplacian(U) - U*V**2 +  F   *(1-U) )
    V += ( Dv*laplacian(V) + U*V**2 - (F+k)*V     )

    if i % skip == 0:
        P[j] = U
        j += 1

make_ani(P)

