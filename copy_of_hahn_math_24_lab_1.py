# -*- coding: utf-8 -*-
"""copy-of-hahn-math-24-lab-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/njamieson2014/baa775bee9fcb8c9be41694d093d71d9/copy-of-hahn-math-24-lab-1.ipynb

## Python Basics

### Calculator
"""

# Comments with hashtag, python ignores this

30.34321 + 9.12313 - 3.5567 #addition and subtraction

2*2 #multiplication

2**8 #exponentiation

2**123

2**12345 #computer can calculate extremely large numbers

import sys #imports the sys module which has different functions
sys.set_int_max_str_digits(650) #limits the amount of numbers displayed per string
2**45

8/4 #division

11//4 #divides, and rounds down to the nearest whole number

8%12 #divides the numbers, then outputs the remainder

13%12

22%12

24%12

"""### Variables"""

apples = 5 #words or symbols can be created and be treated as variable with stored values by entering name = (a number)

oranges = 8

total = apples + oranges #variables can be set to other variables and operated on just like numbers

total #displays the value of a variable

apples**2

cost_per_apple = 0.25

total_apple_costs = cost_per_apple * apples

total_apple_costs

"""### Vectors"""

import numpy as np #imports the numpy library which contains many mathematical functions and operators. as np lets us shorten the name to "np" when typing our code
import matplotlib.pyplot as plt #imports the pyplot module from matplotlib library, containing many graphical functions, and provides a matlab like interface for creating plots. abbreviates the library command to "plt"

np.arange(5) #creates an array starting from zero, and going up to but not including the number

x = np.arange(5) #assigns this created array to the variable x

x

y = 3 * x + 5 #creates variable y, which is a function of x and some constants. y becomes an array as well

y

# x = np.array([133,24,333,4,5,6])
# y = np.array([11,22,33,44,55,66])

x,y #displays both variables, as arrays, one after the other

"""### Plotting"""

plt.plot(x,y) #plots x and y on a table

plt.plot(x,y,'.') #plots x and y on a table. "." draws the plot as points not connected

plt.plot(x,y,'r.') #can change the color

plt.plot(x,y,'b--') #"--" makes it a dashed light

import matplotlib.pyplot as plt

plt.plot(x,y)

x = np.linspace(0,5,10) #makes a linear array, from 0 to 5, with 10 evenly spaced numbers

x

y = x**2

plt.plot(x,y)

plt.plot(x,y)
plt.title("New Graph of x**2"); #title
plt.xlabel("x"); #x and y axis label
plt.ylabel("y");

plt.plot(x,y,label="x squared")
plt.title("Graph of x**2");
plt.xlabel("x");
plt.ylabel("y");
plt.legend() #adds a legend to differentiate if multiple plots are graphed together

x = np.linspace(0, 2, 100)

plt.plot(x, x, label='linear')
plt.plot(x, x**2, label='quadratic')
plt.plot(x, x**3, label='cubic')

plt.xlabel('x label')
plt.ylabel('y label')

plt.title("Simple Plot")

plt.legend()

labels = 'Frogs', 'Dogs', 'Cats', 'Birds' #assigns a varriable whose value is an array of words
sizes = [15, 30, 40, 15] #creates a variable with an array of numbers
explode = (0, 0.2, 0, 0)  # only "explode" the 2nd slice (i.e. 'Dogs') makes ones slice pop out

fig1, ax1 = plt.subplots() #creates a new figure(fig1) with a subplot (ax1)
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)  #creates a pie chart on axis 1 with different inputs: values of "sizes", labels of "labels", format of displayed numbers, shadow, and rotation angle
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show() #show the plot

import numpy as np
import matplotlib.pyplot as plt
t = np.arange(0.0, 2.0, 0.01) #creates an array from 0 up to 2 with 0.01 increments
s = np.sin(2*np.pi*t) #performs the function sin(2pi*t) and saves it as an array s

plt.plot(t, s)
plt.title(r' $\alpha_i > \beta_i$ ', fontsize=20) #r allows us to enter a raw string, allowing us to type \. '$$' allows us to use LaTeX markup where \alpha displays the greek letter. _i creates a subscript "i"
plt.text(1, -0.6, r'$\sum_{i=0}^\infty x_i$', fontsize=20) #LaTeX can also display mathmetical functions as text, here plotted on the graph at 1,-0.6
plt.text(0.5, 0.6, r'$\mathcal{A}\mathrm{sin}(2 \omega t)$',fontsize=15)
plt.xlabel('time (s)')
plt.ylabel('volts (mV)')
plt.show()

"""Plot the following functions from $x = -10$ to $x = 10$

(Hint: np.sin, np.exp)

$y = 10x+7$

$y = -3x-12$

$y=\sin(x)$

$y=e^x$

$y=e^{-x^2}$

Pick out a plot of your choice from [here](https://matplotlib.org/stable/gallery/index.html), copy the code to this notebook, run, and document to the best of your abilities.
"""

import matplotlib.pyplot as plt
import numpy as np

from matplotlib.colors import Normalize
from matplotlib.markers import MarkerStyle
from matplotlib.text import TextPath
from matplotlib.transforms import Affine2D

SUCCESS_SYMBOLS = [
    TextPath((0, 0), "â˜¹"),
    TextPath((0, 0), "ðŸ˜’"),
    TextPath((0, 0), "â˜º"),
]

N = 25
skills = np.random.uniform(5, 80, size=N) * 0.1 + 5
takeoff_angles = np.random.normal(0, 90, N)
thrusts = np.random.uniform(size=N)
successful = np.random.randint(0, 3, size=N)
positions = np.random.normal(size=(N, 2)) * 5
data = zip(skills, takeoff_angles, thrusts, successful, positions)

cmap = plt.colormaps["jet"]
fig, ax = plt.subplots()
fig.suptitle("Throwing success", size=14)
for skill, takeoff, thrust, mood, pos in data:
    t = Affine2D().scale(skill).rotate_deg(takeoff)
    m = MarkerStyle(SUCCESS_SYMBOLS[mood], transform=t)
    ax.plot(pos[0], pos[1], marker=m, color=cmap(thrust))


plt.show()

import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(-10, 10)
y1 = 10*x+7
y2 = -3*x-12

plt.rc('lines', linewidth=2.5)
fig, ax = plt.subplots()

# Using set_dashes() and set_capstyle() to modify dashing of an existing line.
line1, = ax.plot(x, y1, label='10x+7')
line1.set_dashes([2, 2, 10, 2])  # 2pt line, 2pt break, 10pt line, 2pt break.
line1.set_dash_capstyle('round')

# Using plot(..., dashes=..., gapcolor=...) to set the dashing and
# alternating color when creating a line.
line3, = ax.plot(x, y2, 'g',dashes=[4, 4], gapcolor='tab:pink',
                 label='-3x-12')

ax.legend(handlelength=4)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(-10,10,75)
y = np.sin(x)

fig, ax = plt.subplots()

ax.plot(x, y, color='black')
ax.axhline(0, color='black')

ax.fill_between(x, 1, where=y > 0, facecolor='green', alpha=.5)
ax.fill_between(x, -1, where=y < 0, facecolor='red', alpha=.5)

plt.show()

import matplotlib.pyplot as plt
import numpy as np

x=np.linspace(-10,10,100)
y=np.exp(x)

plt.plot(x, y)
plt.fill_between(x, y, color='skyblue')

import matplotlib.pyplot as plt
import numpy as np

from matplotlib import patheffects

x=np.linspace(-10,10,100)
y=np.exp(-x*2)

nx = 101
plt.plot(x, y, label="Curve", path_effects=[patheffects.withTickedStroke()])

"""### Graphics Output"""

from IPython.core.display import display, HTML #allows python to display different things such as images or html code

display(HTML('<h1>Hello World!</h1>')) #displays "Hello world", written in html code

"""### Numpy - Numerical Python"""

import numpy as np

np.random.random() #generates a random number between 0 & 1

np.random.random() > 0.5 #generates a random number and displays true or false for if it meets the condition of being greater than .5

r = np.random.random(); print(r); r >0.5 #prints the value as well

r

r > 0.5 #is the variable bigger than .5? true or falso







def flip_coin(): #creates a function called "flip_coin" which chooses heads or tails, a 50/50 chance, and then prints the output
    if np.random.random() > 0.5:
        print("Heads")
    else:
        print("Tails")

flip_coin()

np.random.randint(15,20) #randint=random integer, from 15 up to 20

def coin():
  return np.random.randint(2) #returns a random integer, from 0 up to 2, so 0 or 1

coin()

display(HTML('<img src="https://random-ize.com/coin-flip/us-quarter/us-quarter-front.jpg">')) #displays an html link, in this case an image

heads = 'https://random-ize.com/coin-flip/us-quarter/us-quarter-front.jpg' #assigns a variable called heads or tails, that contain links to images
tails = 'https://random-ize.com/coin-flip/us-quarter/us-quarter-back.jpg'

def show_img(image):#creates a function "show_img" that is dependant on variable "image"
  display(HTML('<img src=' + image + '>')) #displays the variable "image" in html

show_img(heads)

show_img(tails)

def flip_coin():          #combines it all, creates a function that shows a linked image of the random coinflip result

    if coin():
        show_img(heads)
    else:
        show_img(tails)

flip_coin()

for i in range(5): #runs the function 5 times
    flip_coin()





"""# Cards"""



card_url_head = "https://www.improvemagic.com/wp-content/uploads/2020/11/" #this website has images of each card
#between the "head" and the "tail" a two digit code, first for suit, second for value, will be inputted to complete the link and display the card
card_url_tail = ".png"

suit = ['k','p','s','l'] #clubs,spades,hearts,diamonds
card = ['a','2','3','4','5','6','7','8','9','10','j','q','k'] #values of the cards

i = np.random.randint(4) #creates a variable i, and picks a random integer from 0 up to 4
j = np.random.randint(13) #creates a variable j, and picks a random integer from 0 up to 13

i,j #displays the values of our two indexes

suit[i] #assigns the random index "i" that was generated to a position in the "suit" array

card[j] #assigns the random index "j" that was generated to a position in the "card" array

def card_image(card_number): #creates a function that accepts a variable "card_number" and determines the i and j (suit and value) of the card

    i = card_number//13 #assigns i as number equal to card_number divided by 13, rounded down
    j = card_number%13 #assignes j as the number equal to the remainder of card_number divided by 13
    #this creates a function that can take the input number and assign it to different baskets in intervals of 13

    return suit[i]+card[j]

card_image(1) #between 0-51, you can select any card

img = card_url_head + card_image(16) + card_url_tail #completes the link with the desired card

img

show_img(img) #displays the card

for i in range(52): #creates a for loop that displays each card, one by one
    img = card_url_head + card_image(i) + card_url_tail
    show_img(img)

import random

def initialize_deck():
    #Create and shuffle a deck of 52 cards represented by numbers 0-51.
    deck = list(range(52))
    random.shuffle(deck)
    return deck
#creats a deck of 52 cards and arranges them in a random order
def draw_cards(deck, top_index, num=5):
    drawn_cards = deck[top_index:top_index + num]
    return drawn_cards, top_index + num
#creates a function that allows you to draw "num" amount of cards, from the top of the index, to the top of the index + "num"
# Initialize and shuffle the deck
deck = initialize_deck()
top_index = 0  # Start at the beginning of the deck

deck

# Draw 5 cards for a poker hand
hand, top_index = draw_cards(deck, top_index, 5)

hand

hand, top_index = draw_cards(deck, top_index, 5)

hand

# Display the hand
for card_number in hand:
    img_url = card_url_head + card_image(card_number) + card_url_tail
    show_img(img_url)

def show_hand(hand): #displays all the images in a row
    images_html = ''.join([f'<img src="{card_url_head + card_image(card_number) + card_url_tail}" style="display:inline-block; margin:5px;" />' for card_number in hand])
    display(HTML(images_html))

show_hand(hand)





"""# Rank Hand"""

def evaluate_hand(hand):
    rank_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'j': 11, 'q': 12, 'k': 13, 'a': 14}
    suits = ['k', 'p', 's', 'l']  # clubs, spades, hearts, diamonds

    # Convert the hand to a list of (rank, suit) tuples
    converted_hand = [(rank_values[card[card_number % 13]], suits[card_number // 13]) for card_number in hand] #converts each card value and suit to different outputs
    converted_hand.sort() #sorts the cards in order

    rank_counts = {rank: 0 for rank in rank_values.values()}
    suit_counts = {suit: 0 for suit in suits}
    for rank, suit in converted_hand:
        rank_counts[rank] += 1
        suit_counts[suit] += 1

    # Check for flush
    is_flush = max(suit_counts.values()) == 5 #checks for 5 cards with the same suit value

    # Check for straight and royal flush
    rank_sequence = [rank for rank, _ in converted_hand]
    is_straight = all(rank_sequence[i] - rank_sequence[i - 1] == 1 for i in range(1, 5)) #checks if the difference between each card is 1, if so, it is a straight
    is_royal = is_straight and rank_sequence[0] == 10

    # Check for other hand types
    pairs = sum(1 for count in rank_counts.values() if count == 2)
    three_of_a_kind = 3 in rank_counts.values()
    four_of_a_kind = 4 in rank_counts.values()

    if is_royal and is_flush:
        return "Royal Flush"
    elif is_straight and is_flush:
        return "Straight Flush"
    elif four_of_a_kind:
        return "Four of a Kind"
    elif three_of_a_kind and pairs == 1:
        return "Full House"
    elif is_flush:
        return "Flush"
    elif is_straight:
        return "Straight"
    elif three_of_a_kind:
        return "Three of a Kind"
    elif pairs == 2:
        return "Two Pair"
    elif pairs == 1:
        return "One Pair"
    else:
        return "High Card"



# Initialize and shuffle the deck
deck = initialize_deck()
top_index = 0  # Start at the beginning of the deck

hand, top_index = draw_cards(deck, top_index, 5)


print(evaluate_hand(hand))
show_hand(hand)



for i in range(10): #displays 10 hands and evaluate them
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)


    print(evaluate_hand(hand))
    show_hand(hand)



for i in range(100): #generates 100 hands, only show hands with two pairs
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Two Pair":
        print("Winner!")
        show_hand(hand)



for i in range(1000): #runs 1000 hands, checks for any flushes
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Flush":
        print("Winner!")
        show_hand(hand)

# Commented out IPython magic to ensure Python compatibility.
# %%timeit #times how long it takes to recieve the desired result
# # Initialize and shuffle the deck
# deck = initialize_deck()
# top_index = 0  # Start at the beginning of the deck
# 
# hand, top_index = draw_cards(deck, top_index, 5)
# 
# if evaluate_hand(hand) == "Royal Flush":
#     print("Winner!")
#     show_hand(hand)

for i in range(1000000): #completes 1000000 hands, displays all royal flushes
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Royal Flush":
        print("Winner!")
        show_hand(hand)



wins = 0
N = 1000000
#keeps an incremental counter of all the royal flushes
for i in range(N):
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Royal Flush":
        wins += 1
        print("Winner!")
        show_hand(hand)

wins/N

