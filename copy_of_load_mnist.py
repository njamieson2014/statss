# -*- coding: utf-8 -*-
"""Copy of Load MNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1slMCD1op8je_lCA3NwfDx9b8CdYUgTQU
"""

import torch
from torchvision import datasets, transforms
import numpy as np
# Define a transform to normalize the data
transform = transforms.Compose([transforms.ToTensor()]) #converts inputs into tensors

# Download and load the MNIST training data
train_data = datasets.MNIST(root='./data', train=True, download=True, transform=transform) #downloads the data, set it to the training set, and transform it into tensors
#then creates an instance of the mnist dataset class and specifies where it will be stored

# Extracting the data and targets as tensors
train_images = train_data.data #extracts the image data from the train_data object. The .data contains the images as tensors
train_labels = train_data.targets #same as above, but for labels

train_images.shape, train_labels.shape  #run the training mode and output the dimensions of the dataset

import matplotlib.pyplot as plt

28*28

train_images[0,:,:] #retrieves the first image in the dataset as a 2d tensor

x = train_images[0,:,:] #contains the pixel values for the first image in the mnist training data

plt.imshow(x) # a 5

train_labels[0]  #returns the label from the first image in the training data

x.shape #shows the shape of the first image in the training data

x.flatten()

x = x.flatten() #produces a 1D tensor from a 2D tensor

x.shape

x = x.reshape(28,28) #reshape back to a 2D tensor

x.shape

m = torch.rand(10,784) #generates a 10x784 matrix consisting of random numbers between 0 and 1

m

m.shape

x = x.flatten()

x = x/255.0 #normalize for rgb values

x

m.shape,x.shape

m@x #perform matrix multiplication, each matrix must have at least one equal number of elements

y = torch.matmul(m,x) #performs matrix multiplicationg using the pytorch function

y

torch.max(y) #return the max value of the resultant tensor "y"

torch.argmax(y) #finds the index of the max value of the tensor "y"

x = train_images[0:25,:,:]/255.0 #takes the first 25 images in the training set and normalizes their pixel values

x.shape

x = x.reshape(25,784) #reshape to perform matrix multiplication

x.shape

x  = x.T #swaps the deminsions of the tensor "x"

x.shape

y = m@x #generates a 2d matrix from this multiplication

y.shape

plt.imshow(y)

